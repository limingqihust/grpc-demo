// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: elasticcdc.proto
// Protobuf C++ Version: 5.26.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_elasticcdc_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_elasticcdc_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION != 5026001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_elasticcdc_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_elasticcdc_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_elasticcdc_2eproto;
namespace elasticcdc {
class ElasticcdcReply;
struct ElasticcdcReplyDefaultTypeInternal;
extern ElasticcdcReplyDefaultTypeInternal _ElasticcdcReply_default_instance_;
class ElasticcdcRequest;
struct ElasticcdcRequestDefaultTypeInternal;
extern ElasticcdcRequestDefaultTypeInternal _ElasticcdcRequest_default_instance_;
}  // namespace elasticcdc
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace elasticcdc {

// ===================================================================


// -------------------------------------------------------------------

class ElasticcdcRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:elasticcdc.ElasticcdcRequest) */ {
 public:
  inline ElasticcdcRequest() : ElasticcdcRequest(nullptr) {}
  ~ElasticcdcRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ElasticcdcRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline ElasticcdcRequest(const ElasticcdcRequest& from) : ElasticcdcRequest(nullptr, from) {}
  inline ElasticcdcRequest(ElasticcdcRequest&& from) noexcept
      : ElasticcdcRequest(nullptr, std::move(from)) {}
  inline ElasticcdcRequest& operator=(const ElasticcdcRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ElasticcdcRequest& operator=(ElasticcdcRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ElasticcdcRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ElasticcdcRequest* internal_default_instance() {
    return reinterpret_cast<const ElasticcdcRequest*>(
        &_ElasticcdcRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(ElasticcdcRequest& a, ElasticcdcRequest& b) { a.Swap(&b); }
  inline void Swap(ElasticcdcRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ElasticcdcRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ElasticcdcRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ElasticcdcRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ElasticcdcRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ElasticcdcRequest& from) { ElasticcdcRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ElasticcdcRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "elasticcdc.ElasticcdcRequest"; }

 protected:
  explicit ElasticcdcRequest(::google::protobuf::Arena* arena);
  ElasticcdcRequest(::google::protobuf::Arena* arena, const ElasticcdcRequest& from);
  ElasticcdcRequest(::google::protobuf::Arena* arena, ElasticcdcRequest&& from) noexcept
      : ElasticcdcRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
    kImageClassifyRequestInfoFieldNumber = 2,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string image_classify_request_info = 2;
  void clear_image_classify_request_info() ;
  const std::string& image_classify_request_info() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_image_classify_request_info(Arg_&& arg, Args_... args);
  std::string* mutable_image_classify_request_info();
  PROTOBUF_NODISCARD std::string* release_image_classify_request_info();
  void set_allocated_image_classify_request_info(std::string* value);

  private:
  const std::string& _internal_image_classify_request_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image_classify_request_info(
      const std::string& value);
  std::string* _internal_mutable_image_classify_request_info();

  public:
  // @@protoc_insertion_point(class_scope:elasticcdc.ElasticcdcRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      68, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr image_classify_request_info_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_elasticcdc_2eproto;
};
// -------------------------------------------------------------------

class ElasticcdcReply final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:elasticcdc.ElasticcdcReply) */ {
 public:
  inline ElasticcdcReply() : ElasticcdcReply(nullptr) {}
  ~ElasticcdcReply() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ElasticcdcReply(
      ::google::protobuf::internal::ConstantInitialized);

  inline ElasticcdcReply(const ElasticcdcReply& from) : ElasticcdcReply(nullptr, from) {}
  inline ElasticcdcReply(ElasticcdcReply&& from) noexcept
      : ElasticcdcReply(nullptr, std::move(from)) {}
  inline ElasticcdcReply& operator=(const ElasticcdcReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ElasticcdcReply& operator=(ElasticcdcReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ElasticcdcReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const ElasticcdcReply* internal_default_instance() {
    return reinterpret_cast<const ElasticcdcReply*>(
        &_ElasticcdcReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(ElasticcdcReply& a, ElasticcdcReply& b) { a.Swap(&b); }
  inline void Swap(ElasticcdcReply* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ElasticcdcReply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ElasticcdcReply* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ElasticcdcReply>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ElasticcdcReply& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ElasticcdcReply& from) { ElasticcdcReply::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ElasticcdcReply* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "elasticcdc.ElasticcdcReply"; }

 protected:
  explicit ElasticcdcReply(::google::protobuf::Arena* arena);
  ElasticcdcReply(::google::protobuf::Arena* arena, const ElasticcdcReply& from);
  ElasticcdcReply(::google::protobuf::Arena* arena, ElasticcdcReply&& from) noexcept
      : ElasticcdcReply(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 1,
    kImageClassifyReplyInfoFieldNumber = 2,
  };
  // string message = 1;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // string image_classify_reply_info = 2;
  void clear_image_classify_reply_info() ;
  const std::string& image_classify_reply_info() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_image_classify_reply_info(Arg_&& arg, Args_... args);
  std::string* mutable_image_classify_reply_info();
  PROTOBUF_NODISCARD std::string* release_image_classify_reply_info();
  void set_allocated_image_classify_reply_info(std::string* value);

  private:
  const std::string& _internal_image_classify_reply_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image_classify_reply_info(
      const std::string& value);
  std::string* _internal_mutable_image_classify_reply_info();

  public:
  // @@protoc_insertion_point(class_scope:elasticcdc.ElasticcdcReply)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      67, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::google::protobuf::internal::ArenaStringPtr image_classify_reply_info_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_elasticcdc_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ElasticcdcRequest

// string name = 1;
inline void ElasticcdcRequest::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ElasticcdcRequest::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:elasticcdc.ElasticcdcRequest.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ElasticcdcRequest::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:elasticcdc.ElasticcdcRequest.name)
}
inline std::string* ElasticcdcRequest::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:elasticcdc.ElasticcdcRequest.name)
  return _s;
}
inline const std::string& ElasticcdcRequest::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void ElasticcdcRequest::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* ElasticcdcRequest::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* ElasticcdcRequest::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:elasticcdc.ElasticcdcRequest.name)
  return _impl_.name_.Release();
}
inline void ElasticcdcRequest::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:elasticcdc.ElasticcdcRequest.name)
}

// string image_classify_request_info = 2;
inline void ElasticcdcRequest::clear_image_classify_request_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.image_classify_request_info_.ClearToEmpty();
}
inline const std::string& ElasticcdcRequest::image_classify_request_info() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:elasticcdc.ElasticcdcRequest.image_classify_request_info)
  return _internal_image_classify_request_info();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ElasticcdcRequest::set_image_classify_request_info(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.image_classify_request_info_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:elasticcdc.ElasticcdcRequest.image_classify_request_info)
}
inline std::string* ElasticcdcRequest::mutable_image_classify_request_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_image_classify_request_info();
  // @@protoc_insertion_point(field_mutable:elasticcdc.ElasticcdcRequest.image_classify_request_info)
  return _s;
}
inline const std::string& ElasticcdcRequest::_internal_image_classify_request_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.image_classify_request_info_.Get();
}
inline void ElasticcdcRequest::_internal_set_image_classify_request_info(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.image_classify_request_info_.Set(value, GetArena());
}
inline std::string* ElasticcdcRequest::_internal_mutable_image_classify_request_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.image_classify_request_info_.Mutable( GetArena());
}
inline std::string* ElasticcdcRequest::release_image_classify_request_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:elasticcdc.ElasticcdcRequest.image_classify_request_info)
  return _impl_.image_classify_request_info_.Release();
}
inline void ElasticcdcRequest::set_allocated_image_classify_request_info(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.image_classify_request_info_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.image_classify_request_info_.IsDefault()) {
          _impl_.image_classify_request_info_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:elasticcdc.ElasticcdcRequest.image_classify_request_info)
}

// -------------------------------------------------------------------

// ElasticcdcReply

// string message = 1;
inline void ElasticcdcReply::clear_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& ElasticcdcReply::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:elasticcdc.ElasticcdcReply.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ElasticcdcReply::set_message(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:elasticcdc.ElasticcdcReply.message)
}
inline std::string* ElasticcdcReply::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:elasticcdc.ElasticcdcReply.message)
  return _s;
}
inline const std::string& ElasticcdcReply::_internal_message() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.message_.Get();
}
inline void ElasticcdcReply::_internal_set_message(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* ElasticcdcReply::_internal_mutable_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* ElasticcdcReply::release_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:elasticcdc.ElasticcdcReply.message)
  return _impl_.message_.Release();
}
inline void ElasticcdcReply::set_allocated_message(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.message_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.message_.IsDefault()) {
          _impl_.message_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:elasticcdc.ElasticcdcReply.message)
}

// string image_classify_reply_info = 2;
inline void ElasticcdcReply::clear_image_classify_reply_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.image_classify_reply_info_.ClearToEmpty();
}
inline const std::string& ElasticcdcReply::image_classify_reply_info() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:elasticcdc.ElasticcdcReply.image_classify_reply_info)
  return _internal_image_classify_reply_info();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ElasticcdcReply::set_image_classify_reply_info(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.image_classify_reply_info_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:elasticcdc.ElasticcdcReply.image_classify_reply_info)
}
inline std::string* ElasticcdcReply::mutable_image_classify_reply_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_image_classify_reply_info();
  // @@protoc_insertion_point(field_mutable:elasticcdc.ElasticcdcReply.image_classify_reply_info)
  return _s;
}
inline const std::string& ElasticcdcReply::_internal_image_classify_reply_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.image_classify_reply_info_.Get();
}
inline void ElasticcdcReply::_internal_set_image_classify_reply_info(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.image_classify_reply_info_.Set(value, GetArena());
}
inline std::string* ElasticcdcReply::_internal_mutable_image_classify_reply_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.image_classify_reply_info_.Mutable( GetArena());
}
inline std::string* ElasticcdcReply::release_image_classify_reply_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:elasticcdc.ElasticcdcReply.image_classify_reply_info)
  return _impl_.image_classify_reply_info_.Release();
}
inline void ElasticcdcReply::set_allocated_image_classify_reply_info(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.image_classify_reply_info_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.image_classify_reply_info_.IsDefault()) {
          _impl_.image_classify_reply_info_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:elasticcdc.ElasticcdcReply.image_classify_reply_info)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace elasticcdc


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_elasticcdc_2eproto_2epb_2eh
